name: 🚀 FoodBuddy 배포 파이프라인

on:
  push:
    branches:
      - main
      - develop
      - infra/*
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_FRONTEND: foodbuddy-frontend
  ECR_REPOSITORY_BACKEND: foodbuddy-backend
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  NEXT_PUBLIC_LOCAL_BACK_URL: ${{ secrets.NEXT_PUBLIC_LOCAL_BACK_URL }}

permissions:
  contents: read

jobs:
  # 프론트엔드 빌드 작업
  build-frontend:
    name: 🎨 프론트엔드 빌드
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_LOCAL_BACK_URL: ${{ secrets.NEXT_PUBLIC_LOCAL_BACK_URL }}
    steps:
      - name: 🧹 디스크 공간 확보
        run: |
          echo "📊 프론트엔드 작업 시작: $(date)"
          echo "🔍 현재 브랜치: ${{ github.ref }}"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
          docker system prune -af
          df -h

      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: 🔐 AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🎨 프론트엔드 빌드 및 푸시
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./FE/foodreviewapp
        run: |
          echo "🏗️ 프론트엔드 빌드 시작: $(date)"
          echo "📦 도커 이미지 태그: $IMAGE_TAG"
          docker build \
            --build-arg NEXT_PUBLIC_LOCAL_BACK_URL=${{ secrets.NEXT_PUBLIC_LOCAL_BACK_URL }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG . 2>&1 | tee frontend_build.log
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "✅ 프론트엔드 빌드 완료: $(date)"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG"

  # 백엔드 빌드 작업
  build-backend:
    name: 🔧 백엔드 빌드
    runs-on: ubuntu-latest
    steps:
      - name: 🧹 디스크 공간 확보
        run: |
          echo "📊 백엔드 작업 시작: $(date)"
          echo "🔍 현재 브랜치: ${{ github.ref }}"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
          docker system prune -af
          df -h

      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: 🔐 AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🔧 백엔드 빌드 및 푸시
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./BE/yoriview
        run: |
          echo "🏗️ 백엔드 빌드 시작: $(date)"
          echo "📦 도커 이미지 태그: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG . 2>&1 | tee backend_build.log
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "✅ 백엔드 빌드 완료: $(date)"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG"

  # 배포 작업
  deploy:
    name: 🚀 배포
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: 🔐 AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🚀 EC2 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "🎬 EC2 배포 시작: $(date)"

            cd ~/foodbuddy

            # 환경변수 설정
            echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" > .env
            echo "ECR_REPOSITORY_FRONTEND=${{ env.ECR_REPOSITORY_FRONTEND }}" >> .env
            echo "ECR_REPOSITORY_BACKEND=${{ env.ECR_REPOSITORY_BACKEND }}" >> .env
            echo "IMAGE_TAG=${{ github.sha }}" >> .env

            echo "🔑 ECR 로그인"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "🔄 컨테이너 재시작"
            docker-compose pull
            docker-compose down || true
            docker-compose up -d

            echo "🔍 컨테이너 상태 확인"
            docker ps

            echo "✅ 배포 완료: $(date)"

      - name: 📄 docker-compose.yml 복사
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/foodbuddy"
          overwrite: true

      - name: 🔄 컨테이너 재시작
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd ~/foodbuddy
            docker-compose pull
            docker-compose down || true
            docker-compose up -d
            docker ps
