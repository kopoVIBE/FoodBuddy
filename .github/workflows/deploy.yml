name: Deploy to Amazon ECR

on:
  push:
    branches: [main, develop, feature/*, hotfix/*, infra/*]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_FRONTEND: foodbuddy-frontend
  ECR_REPOSITORY_BACKEND: foodbuddy-backend
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./FE/food-review-app
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG"

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./BE/yoriview
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/foodbuddy
            cd ~/foodbuddy

            # Create docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.8'

            services:
              mysql:
                image: mysql:8.0
                container_name: mysql
                environment:
                  MYSQL_ROOT_PASSWORD: try1234
                  MYSQL_DATABASE: yoriview
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                  timeout: 5s
                  retries: 10

              backend:
                image: ${ECR_REGISTRY}/${ECR_REPOSITORY_BACKEND}:${IMAGE_TAG}
                container_name: backend
                ports:
                  - "8080:8080"
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/yoriview?serverTimezone=Asia/Seoul&useSSL=false
                  - SPRING_DATASOURCE_USERNAME=root
                  - SPRING_DATASOURCE_PASSWORD=try1234
                depends_on:
                  mysql:
                    condition: service_healthy

              frontend:
                image: ${ECR_REGISTRY}/${ECR_REPOSITORY_FRONTEND}:${IMAGE_TAG}
                container_name: frontend
                ports:
                  - "3000:3000"
                depends_on:
                  - backend

            volumes:
              mysql_data:
            EOL

            # Set environment variables
            echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" > .env
            echo "ECR_REPOSITORY_FRONTEND=${{ env.ECR_REPOSITORY_FRONTEND }}" >> .env
            echo "ECR_REPOSITORY_BACKEND=${{ env.ECR_REPOSITORY_BACKEND }}" >> .env
            echo "IMAGE_TAG=${{ github.sha }}" >> .env

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Pull images and deploy
            docker-compose pull
            docker-compose down || true
            docker-compose up -d
