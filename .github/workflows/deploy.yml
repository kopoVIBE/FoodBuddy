name: 🚀 FoodBuddy CI/CD Pipeline

on:
  push:
    branches: [main, infra/*, feature/*]
  pull_request:
    branches: [main]

env:
  ECR_REGISTRY: 268556604739.dkr.ecr.ap-northeast-2.amazonaws.com
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: foodbuddy

jobs:
  # 🧹 디스크 정리 및 준비 작업
  prepare:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      is-production: ${{ steps.env.outputs.is-production }}
    steps:
      - name: 📥 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 변경된 파일 감지
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'BE/**'
            frontend:
              - 'FE/**'

      - name: 🌍 환경 설정
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is-production=true" >> $GITHUB_OUTPUT
          else
            echo "is-production=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧹 디스크 공간 정리 (병렬 실행)
        run: |
          echo "🗑️ 디스크 정리 시작..."
          df -h

          # 병렬로 불필요한 파일들 삭제
          {
            sudo rm -rf /usr/share/dotnet &
            sudo rm -rf /usr/local/lib/android &
            sudo rm -rf /opt/ghc &
            sudo rm -rf /usr/local/share/boost &
            sudo rm -rf "$AGENT_TOOLSDIRECTORY" &
            wait
          }

          # Docker 정리
          docker system prune -f

          echo "✅ 디스크 정리 완료"
          df -h

  # 🏗️ 백엔드 빌드 (Spring Boot)
  build-backend:
    needs: prepare
    if: needs.prepare.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 📦 Gradle 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('BE/yoriview/**/*.gradle*', 'BE/yoriview/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ 백엔드 빌드 및 이미지 생성
        working-directory: BE/yoriview
        run: |
          echo "🔨 Gradle 빌드 시작 (테스트 제외, 병렬 처리)..."

          # gradlew 실행 권한 부여
          chmod +x ./gradlew

          # 최적화된 빌드 (테스트 제외, 병렬 처리)
          ./gradlew clean assemble --parallel --build-cache --no-daemon

          echo "📦 Docker 이미지 빌드..."
          docker build -t $ECR_REGISTRY/$PROJECT_NAME-backend:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$PROJECT_NAME-backend:$GITHUB_SHA

          # latest 태그도 푸시 (프로덕션인 경우)
          if [[ "${{ needs.prepare.outputs.is-production }}" == "true" ]]; then
            docker tag $ECR_REGISTRY/$PROJECT_NAME-backend:$GITHUB_SHA $ECR_REGISTRY/$PROJECT_NAME-backend:latest
            docker push $ECR_REGISTRY/$PROJECT_NAME-backend:latest
          fi

  # 🎨 프론트엔드 빌드 (Next.js)
  build-frontend:
    needs: prepare
    if: needs.prepare.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/FE/food-review-app/.next/cache
            ${{ github.workspace }}/FE/food-review-app/node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('FE/food-review-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: 🔧 AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ 프론트엔드 빌드 및 이미지 생성
        working-directory: FE/food-review-app
        run: |
          echo "📦 Docker 이미지 빌드 (멀티스테이지)..."
          docker build -t $ECR_REGISTRY/$PROJECT_NAME-frontend:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$PROJECT_NAME-frontend:$GITHUB_SHA

          # latest 태그도 푸시 (프로덕션인 경우)
          if [[ "${{ needs.prepare.outputs.is-production }}" == "true" ]]; then
            docker tag $ECR_REGISTRY/$PROJECT_NAME-frontend:$GITHUB_SHA $ECR_REGISTRY/$PROJECT_NAME-frontend:latest
            docker push $ECR_REGISTRY/$PROJECT_NAME-frontend:latest
          fi

  # 🚀 배포
  deploy:
    needs: [prepare, build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success' || (needs.build-backend.result == 'skipped' && needs.build-frontend.result == 'skipped'))
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.is-production == 'true' && 'production' || 'development' }}
    steps:
      - name: 📥 체크아웃
        uses: actions/checkout@v4

      - name: 🚀 EC2 배포
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ needs.prepare.outputs.is-production == 'true' && secrets.PROD_EC2_HOST || secrets.DEV_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포 디렉토리 설정
            DEPLOY_ENV="${{ needs.prepare.outputs.is-production == 'true' && 'prod' || 'dev' }}"
            DEPLOY_DIR="/home/ubuntu/foodbuddy-${DEPLOY_ENV}"

            echo "🚀 $DEPLOY_ENV 환경 배포 시작..."

            # 배포 디렉토리 생성
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR

            # AWS CLI 설정 확인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 268556604739.dkr.ecr.ap-northeast-2.amazonaws.com

            # 환경변수 설정
            cat > .env << EOF
            # 🌍 환경 설정
            NODE_ENV=${{ needs.prepare.outputs.is-production == 'true' && 'production' || 'development' }}

            # 🗄️ 데이터베이스 설정
            MYSQL_ROOT_PASSWORD=foodbuddy_root_password
            MYSQL_DATABASE=foodbuddy_db
            MYSQL_USER=foodbuddy_user
            MYSQL_PASSWORD=foodbuddy_password

            # 🔗 서비스 URL
            BACKEND_URL=http://localhost:8080
            FRONTEND_URL=http://localhost:3000

            # 🐳 Docker 이미지 설정
            ECR_REGISTRY=268556604739.dkr.ecr.ap-northeast-2.amazonaws.com
            IMAGE_TAG=${{ github.sha }}
            PROJECT_NAME=foodbuddy
            EOF

            # Docker Compose 파일 다운로드
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/Infra/docker-compose.yml

            # 기존 컨테이너 중지 및 새 이미지로 배포
            echo "🔄 서비스 재시작..."
            docker-compose down
            docker-compose pull
            docker-compose up -d

            # 헬스체크
            echo "🏥 헬스체크 시작..."
            sleep 30

            # 백엔드 헬스체크
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "✅ 백엔드 정상 구동"
            else
              echo "❌ 백엔드 헬스체크 실패"
            fi

            # 프론트엔드 헬스체크
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "✅ 프론트엔드 정상 구동"
            else
              echo "❌ 프론트엔드 헬스체크 실패"
            fi

            echo "🎉 배포 완료!"

      # 📊 배포 결과 슬랙 알림 (나중에 추가 예정)
      # - name: 📊 배포 결과 슬랙 알림
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: "#deployments"
      #     text: |
      #       🚀 FoodBuddy 배포 결과
      #       • 환경: ${{ needs.prepare.outputs.is-production == 'true' && '🟢 Production' || '🟡 Development' }}
      #       • 브랜치: ${{ github.ref_name }}
      #       • 커밋: ${{ github.sha }}
      #       • 상태: ${{ job.status == 'success' && '✅ 성공' || '❌ 실패' }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
