name: Parallel Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - uses: actions/checkout@v3

      # Backend Build Job
      - name: Set up JDK 17
        if: matrix.service == 'backend'
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build Backend
        if: matrix.service == 'backend'
        run: |
          cd BE/yoriview
          ./gradlew build -x test

      - name: Upload Backend Artifact
        if: matrix.service == 'backend'
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: BE/yoriview/build/libs/*.jar

      # Frontend Build Job
      - name: Set up Node.js
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Build Frontend
        if: matrix.service == 'frontend'
        run: |
          cd FE/food-review-app
          npm ci
          npm run build

      - name: Upload Frontend Artifact
        if: matrix.service == 'frontend'
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: FE/food-review-app/.next

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Download both artifacts
      - name: Download Backend Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: BE/yoriview/build/libs

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: FE/food-review-app/.next

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Build and Push Docker Images
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yoriview-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./BE/yoriview
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and Push Frontend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yoriview-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./FE/food-review-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker-compose pull
            docker-compose up -d
